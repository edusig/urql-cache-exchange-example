import { Page } from '@/get-page-type';
import { useCharactersQuery } from '@/graphql/_gen/characters';
import {
  EpisodesDocument,
  EpisodesQuery,
  EpisodesQueryVariables,
  useEpisodesQuery,
} from '@/graphql/_gen/episodes';
import {
  LocationsDocument,
  LocationsQuery,
  LocationsQueryVariables,
  useLocationsQuery,
} from '@/graphql/_gen/locations';
import { withStaticGraphQLClient } from '@/graphql/with-graphql-client';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import { FC, ReactNode } from 'react';

export const getStaticProps: GetStaticProps = withStaticGraphQLClient(async (client) => {
  try {
    await client.query<LocationsQuery, LocationsQueryVariables>(LocationsDocument, {}).toPromise();
    await client.query<EpisodesQuery, EpisodesQueryVariables>(EpisodesDocument, {}).toPromise();
  } catch (e) {
    console.error(e);
  }
  return { props: {}, revalidate: 1 };
});

const Layout: FC<{ children: ReactNode }> = ({ children }) => {
  const [episodesQ] = useEpisodesQuery();
  console.log(episodesQ);
  return (
    <div>
      <h2>Layout</h2>
      {children}
      <h3>Episodes ({episodesQ.data?.episodes?.results?.length ?? 0})</h3>
      <Episodes />
    </div>
  );
};

const Episodes: FC = () => {
  const [episodesQ] = useEpisodesQuery();
  return (
    <ul>
      {episodesQ.data?.episodes?.results?.map((it) => (
        <li key={it?.id}>
          Id: {it?.id} | Name: {it?.name} | Characters:{' '}
          {it?.characters.map((it) => it?.id).join(',')}
        </li>
      ))}
    </ul>
  );
};

const Locations: FC = () => {
  const [locationsQ] = useLocationsQuery();
  return (
    <ul>
      {locationsQ.data?.locations?.results?.map((it) => (
        <li key={it?.id}>
          Id: {it?.id} | Name: {it?.name} | Dimension: {it?.dimension} | Residentes:{' '}
          {it?.residents.map((it) => it?.id).join(',')}
        </li>
      ))}
    </ul>
  );
};

const Home: Page = () => {
  const [charactersQ] = useCharactersQuery();
  const [locationsQ] = useLocationsQuery();
  console.log(charactersQ);
  console.log(locationsQ);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h3>Characters</h3>
        <ul>
          {charactersQ.data?.characters?.results?.map((it) => (
            <li key={it?.id}>
              Id: {it?.id} | Name: {it?.name} | Location ID: {it?.location?.id} | Episodes:{' '}
              {it?.episode.map((it) => it?.id).join(',')}
              Episodes aired at: {it?.episodeAlias.map((it) => it?.air_date).join(', ')}
            </li>
          ))}
        </ul>
        <h3>Locations ({locationsQ.data?.locations?.results?.length ?? 0})</h3>
        <Locations />
      </main>
    </>
  );
};

Home.getLayout = (page: ReactNode) => {
  return <Layout>{page}</Layout>;
};

export default Home;
